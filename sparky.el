(require 'thingatpt)
(require 'cl)


(defmacro sparky--define-key (map key fun &optional undo-fun adjust-fun)
  `(lexical-let ((key-map ,map)
                 (func ,fun)
                 (undo-func ,undo-fun)
                 (adjust-func ,adjust-fun))
     (define-key key-map (kbd ,key) (lambda ()
                                      (interactive)
                                      (run-hooks 'sparky-enter-hook)
                                      (set-transient-map key-map nil
                                                         (lambda ()
                                                           (run-hooks 'sparky-quit-hook)))
                                      (when (and (not (eq func 'sparky-adjust-last-command))
                                                 (not (eq func 'sparky-undo-last-command)))
                                        (push (point) sparky-point-stack))
                                      (call-interactively func)
                                      (when (and (not (eq func 'sparky-adjust-last-command))
                                                 (not (eq func 'sparky-undo-last-command)))
                                        (setq sparky-last-undo-command undo-func)
                                        (setq sparky-last-adjust-command adjust-func)
                                        (setq sparky-last-command last-command)
                                        (setq sparky-last-function func)
                                        (setq sparky-last-key ,key))
                                      ))))

(defvar sparky-enter-hook nil)

(defvar sparky-quit-hook nil)

(defvar sparky-forward-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "x" 'forward-sentence
                        'backward-sentence 'backward-sentence)
    (sparky--define-key map "n" 'next-line
                        'previous-line 'previous-line)
    (sparky--define-key map "f" 'forward-word
                        'backward-word (lambda ()
                                         (interactive)
                                         (backward-word 2)
                                         (forward-word)))
    (sparky--define-key map "s" 'forward-sexp
                        'backward-sexp 'backward-sexp)
    (sparky--define-key map "r" 'forward-paragraph)
    (sparky--define-key map "x" 'forward-sentence)

    (sparky--define-key map "n" 'next-line)
    (sparky--define-key map "f" 'forward-word)
    (sparky--define-key map "s" 'forward-sexp)
    (sparky--define-key map "y" (lambda ()
                                  (interactive)
                                  (forward-symbol 1)))
    (sparky--define-key map "u" 'up-list)
    (sparky--define-key map "i" 'down-list)
    (sparky--define-key map "l" 'forward-list)
    (sparky--define-key map "c" 'forward-sentence)
    (sparky--define-key map "<SPC>" 'set-mark-command)
    (sparky--define-key map "." 'sparky-undo-last-command)
    (sparky--define-key map "," 'sparky-adjust-last-command)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "b" 'sparky-backward)
    (sparky--define-key map "p" 'sparky-backward)
    ;; ("a" beginning/body "Turn on beginning mode." :exit t)
    ;; ("e" end/body "Turn on end mode." :exit t)
    (sparky--define-key map "k" 'sparky-mark)
    (sparky--define-key map "d" 'sparky-mark-forward)
    (sparky--define-key map "a" 'sparky-beginning)
    (sparky--define-key map "e" 'sparky-end)
    ;; ("d" kill-word/body "Turn on kill-word mode." :exit t)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defvar sparky-backward-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "p" 'previous-line 'next-line)
    (sparky--define-key map "b" 'backward-word
                        'forward-word (lambda ()
                                        (interactive)
                                        (forward-word 2)
                                        (backward-word)))
    (sparky--define-key map "s" 'backward-sexp 'forward-sexp)
    (sparky--define-key map "u" 'backward-up-list)
    (sparky--define-key map "l" 'backward-list)
    (sparky--define-key map "c" 'backward-sentence)
    (sparky--define-key map "r" 'backward-paragraph)
    (sparky--define-key map "<SPC>" 'set-mark-command)
    (sparky--define-key map "." 'sparky-undo-last-command)
    (sparky--define-key map "," 'sparky-adjust-last-command)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "f" 'sparky-forward)
    (sparky--define-key map "n" 'sparky-forward)
    (sparky--define-key map "a" 'sparky-beginning)
    (sparky--define-key map "e" 'sparky-end)
    (sparky--define-key map "k" 'sparky-mark)
    (sparky--define-key map "d" 'sparky-mark-forward)
    ;; ("d" kill-word/body "Turn on kill-word mode." :exit t)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defvar sparky-mark-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "k" (lambda ()
                                  (interactive)
                                  (let ((pos (point)))
                                    (if (region-active-p)
                                        (progn
                                          (if (eolp)
                                              (beginning-of-line-text 2)
                                            (end-of-line)))
                                      (progn
                                        (if (eolp)
                                            (progn
                                              (set-mark-command nil)
                                              (beginning-of-line-text 2))
                                          (progn
                                            (set-mark-command nil)
                                            (end-of-line))))))))
    (sparky--define-key map "o" (lambda ()
                                  (interactive)
                                  (let ((pos (point)))
                                    (if (region-active-p)
                                        (beginning-of-line 2)
                                      (progn
                                        (beginning-of-line)
                                        (set-mark-command nil)
                                        (end-of-line))))))
    (sparky--define-key map "r" (lambda ()
                                  (interactive)
                                  (kill-region (region-beginning) (region-end) '(4))))
    (sparky--define-key map "c" 'kill-rectangle)
    (sparky--define-key map "s" (lambda ()
                                  (interactive)
                                  (sparky-mark-thing-at-point 'sexp)))
    (sparky--define-key map "w" (lambda ()
                                  (interactive)
                                  (sparky-mark-thing-at-point 'word)))
    (sparky--define-key map "h" (lambda ()
                                  (interactive)
                                  (delete-horizontal-space)))
    (sparky--define-key map "m" 'forward-word)
    (sparky--define-key map "t" (lambda ()
                                  (interactive)
                                  (just-one-space)))
    (sparky--define-key map "-" (lambda ()
                                  (interactive)
                                  (sparky-mark-string " " " " nil)))
    (sparky--define-key map "z" (lambda (char)
                                  (interactive "cCharacter: ")
                                  (let ((start (point))
                                        (end (search-forward (char-to-string char))))
                                    (goto-char start)
                                    (set-mark-command nil)
                                    (goto-char (- end 1)))))
    (sparky--define-key map "x" 'kill-region)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "f" 'sparky-forward)
    (sparky--define-key map "n" 'sparky-forward)
    (sparky--define-key map "b" 'sparky-backward)
    (sparky--define-key map "p" 'sparky-backward)
    (sparky--define-key map "a" 'sparky-beginning)
    (sparky--define-key map "e" 'sparky-beginning)
    (sparky--define-key map "d" 'sparky-mark-forward)
    ;; ("e" end/body "Turn on end mode." :exit t)
    ;; ("d" kill-word/body "Turn on kill-word mode." :exit t)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defvar sparky-beginning-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "a" 'beginning-of-line)
    (sparky--define-key map "r" 'beginning-of-buffer)
    (sparky--define-key map "s" (lambda ()
                                  (interactive)
                                  (beginning-of-sexp)))
    (sparky--define-key map "u" 'beginning-of-defun)
    (sparky--define-key map "l" 'beginning-of-line-text)
    (sparky--define-key map "<SPC>" 'set-mark-command)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "f" 'sparky-forward)
    (sparky--define-key map "b" 'sparky-backward)
    (sparky--define-key map "n" 'sparky-forward)
    (sparky--define-key map "p" 'sparky-backward)
    (sparky--define-key map "e" 'sparky-end)
    (sparky--define-key map "k" 'sparky-mark)
    (sparky--define-key map "d" 'sparky-mark-forward)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defvar sparky-end-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "e" 'end-of-line)
    (sparky--define-key map "r" 'end-of-buffer)
    (sparky--define-key map "s" (lambda ()
                                  (interactive)
                                  (end-of-sexp)))
    (sparky--define-key map "u" 'end-of-defun)
    (sparky--define-key map "<SPC>" 'set-mark-command)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "f" 'sparky-forward)
    (sparky--define-key map "b" 'sparky-backward)
    (sparky--define-key map "n" 'sparky-forward)
    (sparky--define-key map "p" 'sparky-backward)
    (sparky--define-key map "a" 'sparky-beginning)
    (sparky--define-key map "k" 'sparky-mark)
    (sparky--define-key map "d" 'sparky-mark-forward)
    ;; (sparky--define-key map "d" 'kill-word)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defvar sparky-mark-forward-map
  (let ((map (make-sparse-keymap)))
    (sparky--define-key map "d" (lambda ()
                                  (interactive)
                                  (mark-word nil t)))
    (sparky--define-key map "s" (lambda ()
                                  (interactive)
                                  (mark-sexp nil t)))
    (sparky--define-key map "c" (lambda ()
                                  (interactive)
                                  (mark-end-of-sentence 1)))
    (sparky--define-key map "x" 'kill-region)
    ;; quick shortcuts to the other modes:
    (sparky--define-key map "f" 'sparky-forward)
    (sparky--define-key map "b" 'sparky-backward)
    (sparky--define-key map "n" 'sparky-forward)
    (sparky--define-key map "p" 'sparky-backward)
    (sparky--define-key map "a" 'sparky-beginning)
    (sparky--define-key map "e" 'sparky-end)
    (sparky--define-key map "k" 'sparky-mark)
    (define-key map (kbd "g") 'sparky-keyboard-quit)
    map))

(defun sparky-keyboard-quit ()
  (interactive)
  (run-hooks 'sparky-quit-hook)
  (keyboard-quit))

(defvar sparky-last-command nil)

(defvar sparky-last-function nil)

(defvar sparky-last-key nil)

(defvar sparky-last-key-map nil)

(defvar sparky-last-undo-command nil)

(defvar sparky-last-adjust-command nil)

(defvar sparky-point-stack (list))

(defun sparky-adjust-last-command ()
  (interactive)
  (call-interactively sparky-last-adjust-command))

(defun sparky-undo-last-command ()
  (interactive)
  (call-interactively sparky-last-undo-command))

(defun sparky-mark-thing-at-point (thing)
  (let ((bounds (bounds-of-thing-at-point thing)))
    (goto-char (car bounds))
    (set-mark-command nil)
    (goto-char (cdr bounds))))

(defun sparky-mark-string (char1 char2 hungry)
  (let ((start nil)
        (end nil))
    (save-excursion
      (setq start (search-backward char1))
      (when (null hungry)
        (setq start (+ start 1))))
    (save-excursion
      (setq end (search-forward char2))
      (when (null hungry)
        (setq end (- end 1))))
    (goto-char start)
    (set-mark-command nil)
    (goto-char end)))

(defun sparky-forward ()
  (interactive)
  (setq sparky-last-key-map 'sparky-forward-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-forward-map))

(defun sparky-backward ()
  (interactive)
  (setq sparky-last-key-map 'sparky-backward-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-backward-map))

(defun sparky-mark ()
  (interactive)
  (setq sparky-last-key-map 'sparky-mark-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-mark-map))

(defun sparky-mark-forward ()
  (interactive)
  (setq sparky-last-key-map 'sparky-mark-forward-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-mark-forward-map))

(defun sparky-beginning ()
  (interactive)
  (setq sparky-last-key-map 'sparky-beginning-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-beginning-map))

(defun sparky-end ()
  (interactive)
  (setq sparky-last-key-map 'sparky-end-map)
  (run-hooks 'sparky-enter-hook)
  (set-transient-map sparky-end-map))


(global-set-key (kbd "M-f") 'sparky-forward)
(global-set-key (kbd "M-b") 'sparky-backward)
(global-set-key (kbd "C-p") 'sparky-forward)
(global-set-key (kbd "C-n") 'sparky-backward)
(global-set-key (kbd "C-k") 'sparky-mark)
(global-set-key (kbd "M-d") 'sparky-mark-forward)
(global-set-key (kbd "C-a") 'sparky-beginning)
(global-set-key (kbd "C-e") 'sparky-end)


(provide 'sparky)
